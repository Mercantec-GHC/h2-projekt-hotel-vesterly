@page "/reservations"
@inject AuthService Http
@inject NavigationManager Navigation
@using Blazor.Auth
@using MudBlazor

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h5">Reservations</MudText>
    </MudCardHeader>

    <MudCardContent>
        @if (reservations == null)
        {
            <MudText Typo="Typo.body1">Loading reservations...</MudText>
        }
        else if (reservations.Count == 0)
        {
            <MudText Typo="Typo.body1">No reservations found.</MudText>
        }
        else
        {
            <MudTable Items="reservations" Hover="true" Bordered="true">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Customer Name</MudTh>
                    <MudTh>Check-In</MudTh>
                    <MudTh>Check-Out</MudTh>
                    <MudTh>Price</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Id</MudTd>
                    <MudTd>@context.CustomerName</MudTd>
                    <MudTd>@context.CheckIn.ToShortDateString()</MudTd>
                    <MudTd>@context.CheckOut.ToShortDateString()</MudTd>
                    <MudTd>@context.Price</MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => EditReservation(context.Id))">Edit</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(async () => await DeleteReservation(context.Id))">Delete</MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudCardContent>

    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="CreateReservation">Add Reservation</MudButton>
    </MudCardActions>
</MudCard>

@code {
    private List<Reservations>? reservations;

    protected override async Task OnInitializedAsync()
    {
        await LoadReservations();
    }

    private async Task LoadReservations()
    {
        try
        {
            reservations = await Http.GetFrom<List<Reservations>>("https://localhost:7207/Reservations");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    //got issue with making something similar to the delete function, ill look into it in another version
    private void CreateReservation()
    {
        Navigation.NavigateTo("/Reservations/Post");
    }

    private void EditReservation(int id)
    {
        Navigation.NavigateTo($"/Reservations/Update/{id}");
    }

    private async Task DeleteReservation(int id)
    {
        try
        {
            var response = await Http.GetHttpClient().DeleteAsync($"https://localhost:7207/Reservations/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadReservations();
            }
            else
            {
                Console.WriteLine("Failed to delete the reservation.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public class Reservations
    {
        public int Id { get; set; }
        public string CustomerName { get; set; } = default!;
        public DateTime CheckIn { get; set; }
        public DateTime CheckOut { get; set; }
        public decimal Price { get; set; }
    }
}
