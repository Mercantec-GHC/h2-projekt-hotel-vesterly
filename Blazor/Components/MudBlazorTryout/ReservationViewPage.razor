@page "/reservations"
@inject HttpClient _httpClient
@inject NavigationManager Navigation
@using Blazor.Auth
@using MudBlazor
@using DomainModels.DB

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h5">Reservations</MudText>
    </MudCardHeader>

    <MudCardContent>
        <MudTextField @bind-Value="nameToSearch" Label="Customer name:" HelperText="Customer name:" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="mailToSearch" Label="Customer Email:" HelperText="Customer Email:" Variant="Variant.Outlined" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => LoadReservations()">Save comment</MudButton>
        @*if statement to display a text while loading the page, or if there was an issue.*@
        @if (filteredReservations == null)
        {
            <MudText Typo="Typo.body1">Loading reservations...</MudText>
        }
        else if (filteredReservations.Count == 0)
        {
            <MudText Typo="Typo.body1">No reservations found.</MudText>
        }
        else
        {
            <MudTable Items="filteredReservations" Hover="true" Bordered="true">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Customer Name</MudTh>
                    <MudTh>Check-In</MudTh>
                    <MudTh>Check-Out</MudTh>
                    <MudTh>Price</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Id</MudTd>
                    <MudTd>@context.GuestName</MudTd>
                    <MudTd>@context.CheckIn.ToShortDateString()</MudTd>
                    <MudTd>@context.CheckOut.ToShortDateString()</MudTd>
                    <MudTd>@context.Price</MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"/Reservations/Update/{context.Id}")">Edit</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(async () => await DeleteReservation(context.Id))">Delete</MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudCardContent>

    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="CreateReservation">Add Reservation</MudButton>
    </MudCardActions>
</MudCard>

@code {
    private List<Reservation>? reservations;

    string nameToSearch = "";
    string mailToSearch = "";

    List<Reservation>? filteredReservations;

    protected override async Task OnInitializedAsync()
    {
        await LoadReservations();
    }

    //simple api call to get a list over all current reservations.
    private async Task LoadReservations()
    {
        try
        {
            reservations = await _httpClient.GetFromJsonAsync<List<Reservation>>("https://localhost:7207/Reservations");

            filteredReservations = new List<Reservation>();

            if(nameToSearch == "" && mailToSearch == "")
            {
                filteredReservations = reservations;
            }
            else if(nameToSearch == "" && reservations != null)
            {
                foreach(Reservation reservation in reservations)
                {
                    if (reservation.GuestEmail.Contains(mailToSearch))
                    {
                        filteredReservations.Add(reservation);
                    }
                }
            }
            else if (mailToSearch == "" && reservations != null)
            {
                foreach (Reservation reservation in reservations)
                {
                    if (reservation.GuestName.Contains(nameToSearch))
                    {
                        filteredReservations.Add(reservation);
                    }
                }
            }
            else if (reservations != null)
            {
                foreach (Reservation reservation in reservations)
                {
                    if (reservation.GuestEmail.Contains(mailToSearch))
                    {
                        filteredReservations.Add(reservation);
                    }
                }
            }
            if(filteredReservations.Count == 0)
            {
                filteredReservations = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    
    //got issues with making something similar to the delete function, placeholder class for now.
    private void CreateReservation()
    {
        Navigation.NavigateTo("/Reservations/Post");
    }

    //placeholder class at the current moment.
    private void EditReservation(int id)
    {
        Navigation.NavigateTo($"/Reservations/Update/{id}");
    }

    //class that implements delete function on the razor page which deletes the entry, requires admin login.
    private async Task DeleteReservation(int id)
    {
        try
        {
            //call the api with a Delete call for the specific id, if successful call, reload reservations to show updated list.
            //GetHttpClient() is a function within the AuthService.cs which then includes the login information in the header, since only admin has delete permission.
            var response = await _httpClient.DeleteAsync($"https://localhost:7207/Reservations/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadReservations();
            }
            else
            {
                Console.WriteLine("Failed to delete the reservation.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}