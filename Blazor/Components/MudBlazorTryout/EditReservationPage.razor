@using System.Diagnostics
@inject NavigationManager Navigation
@inject HttpClient Http
@inject Services.DatabaseServices DatabaseServicesInstance

@page "/editreservation/{ReservationId:int}"

<MudPaper Class="mx-auto my-4 p-4" MaxWidth="500px" Elevation="3">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">Edit Reservation</MudText>
        </MudCardHeader>

        <MudCardContent>
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <MudAlert Severity="Severity.Success" Variant="Variant.Filled">@successMessage</MudAlert>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled">@errorMessage</MudAlert>
            }

            @if (reservation == null)
            {
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Class="my-4" />
            }
            else
            {
                <EditForm Model="reservation">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Disabled="@isDisabled" @bind-Value="reservation.GuestName" Label="Name" Required="true" />
                            <MudTextField Disabled="@isDisabled" @bind-Value="reservation.GuestEmail" Label="Email" Required="true" />
                            <MudTextField Disabled="@isDisabled" @bind-Value="reservation.GuestPhoneNr" Label="Phone Number" />

                            <MudDatePicker Disabled="@isDisabled" @bind-Value="reservation.CheckIn" Label="Check-In Date" Required="true" />
                            <MudDatePicker Disabled="@isDisabled" @bind-Value="reservation.CheckOut" Label="Check-Out Date" Required="true" />

                            <MudSelect T="string" Disabled="@isDisabled" @bind-Value="reservation.Room.Type" Label="Room Type" Required="true" @onchange="UpdateRoomPrice">
                                @foreach (var roomType in roomTypes)
                                {
                                    <MudSelectItem Value="roomType">@roomType</MudSelectItem>
                                }
                            </MudSelect>

                            <MudTextField Disabled="true" @bind-Value="reservation.Room.Price" Label="Price" T="int" />
                        </MudCardContent>

                        <MudCardActions Class="d-flex justify-end gap-2">
                            <MudButton Type="Submit" Variant="Variant.Filled" @onclick="EditBooking" Color="Color.Primary">@editButtonText</MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Delete" Disabled="@isDisabled">Delete</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => Navigation.NavigateTo("/reservations"))">Back</MudButton>
                        </MudCardActions>
                    </MudCard>
                </EditForm>
            }
        </MudCardContent>
    </MudCard>
</MudPaper>

@code {
    private bool isDisabled = true;
    private string editButtonText = "Edit";
    private List<string> roomTypes = new List<string>();
    private Dictionary<string, int> roomPrices = new Dictionary<string, int>();

    protected override async Task OnInitializedAsync()
    {
        await GetRoomTypesAndPrices();
        await GetReservation();
    }

    private async Task EditBooking()
    {
        if (isDisabled)
        {
            isDisabled = false;
            editButtonText = "Save";
        }
        else
        {
            await SaveChanges();
        }
    }

    async Task GetRoomTypesAndPrices()
    {
        try
        {
            var rooms = await DatabaseServicesInstance.GetRooms();
            roomTypes = rooms.Select(r => r.Type).Distinct().ToList();
            roomPrices = rooms.GroupBy(r => r.Type).ToDictionary(g => g.Key, g => g.First().Price);
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load room types: " + ex.Message;
        }
    }

    async Task GetReservation()
    {
        try
        {
            reservation = await DatabaseServicesInstance.GetReservationById(ReservationId);
            // Переконаємося, що вибраний тип кімнати існує в roomPrices і оновимо ціну відповідно
            if (roomPrices.ContainsKey(reservation.Room.Type))
            {
                reservation.Room.Price = roomPrices[reservation.Room.Type];
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load reservation: " + ex.Message;
        }
    }

    private void UpdateRoomPrice(ChangeEventArgs args)
    {
        string selectedRoomType = args.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedRoomType) && roomPrices.ContainsKey(selectedRoomType))
        {
            reservation.Room.Price = roomPrices[selectedRoomType];
            StateHasChanged(); // Оновлюємо інтерфейс користувача після зміни ціни
        }
    }

    [Parameter]
    public int ReservationId { get; set; }

    DomainModels.DB.Reservation reservation;
    private string successMessage = "";
    private string errorMessage = "";

    async Task SaveChanges()
    {
        try
        {
            await DatabaseServicesInstance.UpdateReservation(reservation);
            successMessage = "Reservation updated successfully!";
            errorMessage = "";
            isDisabled = true;
            editButtonText = "Edit";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            successMessage = "";
            errorMessage = "Failed to update reservation: " + ex.Message;
            StateHasChanged();
        }
    }

    async Task Delete()
    {
        try
        {
            await DatabaseServicesInstance.DeleteReservation(reservation.Id);
            successMessage = "Reservation deleted successfully!";
            errorMessage = "";
            Navigation.NavigateTo("/reservations");
        }
        catch (Exception ex)
        {
            successMessage = "";
            errorMessage = "Failed to delete reservation: " + ex.Message;
            StateHasChanged();
        }
    }
}
